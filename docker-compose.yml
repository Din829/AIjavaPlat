# version: '3.8' # Docker Compose现代版本不再需要version字段
services:
  mysql_db_for_aisp: # 服务名称，可以自定义
    image: mysql:8.0 # 建议指定明确的版本，如 8.0 或最新稳定版
    container_name: mysql_aisp_db # 容器名称
    restart: always # 容器退出时总是尝试重启
    environment:
      MYSQL_ROOT_PASSWORD: q75946123 # !!! 修改为你自己的强密码 !!!
      MYSQL_DATABASE: ai_support_platform_db # 数据库名，会自动创建
      MYSQL_USER: aisp_user # !!! 自定义应用连接数据库的用户名 !!!
      MYSQL_PASSWORD: q75946123 # !!! 修改为该用户的强密码 !!!
    ports:
      # 将主机的 33306 端口映射到容器的 3306 端口
      # 使用非常高的端口号可以避免与本地已安装的 MySQL 冲突
      - "33306:3306"
    volumes:
      # 数据持久化，将数据库文件存储在 Docker volume 中
      - mysql_aisp_data:/var/lib/mysql
    command: [--character-set-server=utf8mb4, --collation-server=utf8mb4_unicode_ci] # 设置数据库服务器默认字符集和排序规则

  ocr-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-platform-ocr
    ports:
      - "8012:8012"
    environment:
      # Gemini API 配置
      - GEMINI_API_KEY=${GEMINI_API_KEY:-AIzaSyDFLyEYqgaC6plSFF5IjvQEW0FEug6o14o}
      
      # 服务配置
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      
      # Docling 配置
      - DOCLING_ALLOW_DOWNLOADS=1
      - HF_HOME=/app/docling_cache
      - TRANSFORMERS_CACHE=/app/docling_cache/transformers
      - HF_DATASETS_CACHE=/app/docling_cache/datasets
      - HUGGINGFACE_HUB_CACHE=/app/docling_cache/hub
      - DOCLING_CACHE_DIR=/app/docling_cache
    
    volumes:
      # 持久化缓存目录
      - ocr_cache:/app/docling_cache
      # 临时文件目录
      - ocr_temp:/app/temp_uploads
    
    networks:
      - ai-platform-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8012/api/ocr/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  video-processing-service:
    build:
      context: .
      dockerfile: Dockerfile.video
    container_name: ai-platform-video-processing
    ports:
      - "9000:9000"
    environment:
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    volumes:
      # 临时文件目录
      - video_temp:/tmp/video_processing
    networks:
      - ai-platform-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  whisper-service:
    build:
      context: .
      dockerfile: Dockerfile.whisper
    container_name: ai-platform-whisper
    ports:
      - "9999:9999"
    environment:
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - CUDA_VISIBLE_DEVICES=0
    runtime: nvidia
    volumes:
      # 模型缓存目录
      - whisper_cache:/root/.cache
    networks:
      - ai-platform-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9999/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

volumes:
  mysql_aisp_data: # 定义一个具名卷来存储数据
  ocr_cache:
    driver: local
  ocr_temp:
    driver: local
  video_temp:
    driver: local
  whisper_cache:
    driver: local

networks:
  ai-platform-network:
    driver: bridge