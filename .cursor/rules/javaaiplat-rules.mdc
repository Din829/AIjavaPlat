---
description: 
globs: 
alwaysApply: false
---
# 项目开发规则

为了确保项目的高效推进、代码质量以及文档的同步，所有项目成员需遵循以下规则：
## 0.语言规范
请全程和用户用中文进行交流
## lombok问题
请忽视lombok的构造器问题，不用管，为编译器问题

## 1. 编码与开发流程规范

在进行任何编码工作之前，必须遵循以下步骤，以确保对需求的准确理解和实现的高质量：

1.  **需求分析与澄清:**
    *   仔细阅读和理解相关的需求文档、用户故事或任务描述。
    *   如有任何疑问或不明确之处，及时与产品负责人或相关人员沟通确认。
    *   明确功能的输入、输出、边界条件和预期行为。

2.  **详细检查与设计:**
    *   思考实现方案，评估不同方案的优缺点（如性能、可维护性、可扩展性）。
    *   识别潜在的技术难点和风险点。
    *   对于复杂功能，建议先进行简单的设计草案或伪代码。

3.  **阅读相关文档与代码:**
    *   查阅项目中的相关架构文档（如 `PROJECT_ARCHITECTURE.md`, `FRONTEND_ARCHITECTURE.md`）、开发计划（如 `DEVELOPMENT_PLAN.md`, `FRONTEND_PLAN.md`）以及现有的相关模块代码。
    *   理解当前的技术栈、设计模式和代码风格，确保新代码与之保持一致。
    *   分析改动可能对现有功能产生的影响。

4.  **编码实现:**
    *   遵循项目中既定的编码规范和代码风格。
    *   编写清晰、可读、可维护的代码。
    *   添加必要的注释，特别是对于复杂逻辑或关键决策点。

5.  **测试与验证:**
    *   进行充分的单元测试和功能测试。
    *   确保代码在各种正常和异常情况下都能正确工作。

## 2. 文档同步与更新机制

为了保持项目文档的准确性和时效性，确保所有成员都能获取最新的项目信息，必须遵循以下文档更新规则：

1.  **及时更新:**
    *   在完成一个明确的开发阶段、一个主要功能模块、或任何对项目架构、计划产生显著影响的改动后，必须立即更新相关的项目文档。

2.  **更新范围:**
    *   需要更新的文档包括但不限于：
        *   `PROJECT_ARCHITECTURE.md` (后端架构文档)
        *   `FRONTEND_ARCHITECTURE.md` (前端架构文档)
        *   `DEVELOPMENT_PLAN.md` (后端开发计划/进度)
        *   `FRONTEND_PLAN.md` (前端开发计划/进度)
        *   其他相关的设计文档、API文档或用户手册等。

3.  **更新内容:**
    *   清晰、准确地反映所做的更改、新增的功能、解决的问题、以及对计划的调整。
    *   确保文档内容与实际代码和项目状态保持一致。

4.  **版本控制:**
    *   所有文档的修改都应通过版本控制系统（如 Git）进行提交，并附带清晰的提交信息，说明更新的内容和原因。



---
*本规则将根据项目进展和团队反馈持续修订和完善。*


