{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:9000/process-video",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \"url\": $('AI Agent2').item.json.output.content.video } }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -220,
        -20
      ],
      "id": "6c15a03a-f492-4e7e-bca5-6b7dcc6e5d25",
      "name": "处理链接：提交URL给处理服务(BOTH)"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c796732f-b1f1-43b8-86c6-9ecf6cbe8fc3",
              "name": "wavDownloadUrl",
              "value": "={{ \"http://host.docker.internal:9000\" + $json.download_url }}",
              "type": "string"
            },
            {
              "id": "7a85d35f-e911-49aa-b473-784f7f367a41",
              "name": "originalVideoTitle",
              "value": "={{ $json.title }}",
              "type": "string"
            },
            {
              "id": "c0023fe7-1696-4385-a487-aa530dc4f98a",
              "name": "originalVideoDescription",
              "value": "={{ $json.description }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        -20
      ],
      "id": "839f8b51-5539-4246-b6ad-9e4c429538cb",
      "name": "设置元数据和URL(BOTH)"
    },
    {
      "parameters": {
        "url": "={{ $json.wavDownloadUrl }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          },
          "timeout": 120000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        240,
        -20
      ],
      "id": "f1890a7f-b71e-4078-9340-33d109dbb92f",
      "name": "下载转换好的 WAV 文件(BOTH)"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:9999/transcribe",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "={{ $json.audioFile ? 'audioFile' : 'data' }}"
            },
            {
              "name": "language",
              "value": "={{ $('AI Agent2').item.json.output.transcribeLanguage }}"
            },
            {
              "name": "title",
              "value": "={{ $('设置元数据和URL(BOTH)').item.json.originalVideoTitle }}"
            },
            {
              "name": "description",
              "value": "={{ $('设置元数据和URL(BOTH)').item.json.originalVideoDescription }}"
            }
          ]
        },
        "options": {
          "timeout": 600000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        460,
        -20
      ],
      "id": "34ca52a7-9ef6-41da-ab25-fe91d789ff89",
      "name": "Whisper API转写（BOTH）"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1e4dd115-bbf1-4b14-bcf2-e4acbbf8b9e1",
              "name": "transcription",
              "value": "={{ $json.segments }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        680,
        -20
      ],
      "id": "dc3f1992-3b07-45d9-8c62-b46b5fb91f63",
      "name": "提取转写文本(BOTH)"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"keywords\": [\"keyword1\", \"keyword2\", \"keyword3\", \"keyword4\", \"keyword5\", \"...\"],\n  \"coreView\": [\"观点1\", \"观点2\", \"观点3\", \"观点4\", \"观点5\", \"...\"],\n  \"category\": \"技术, 商业, ...\",\n  \"mainTheme\": \"这是对文档核心内容的简要总结，通常为一段话。\",\n  \"url\": [\"https://example.com/link1\", \"https://example.com/link2\", \"...\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1360,
        180
      ],
      "id": "06a082ec-7d45-4168-9ad5-bd52f302d501",
      "name": "Structured Output Parser6"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro-exp-03-25",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1180,
        160
      ],
      "id": "4c73cb98-b7ee-4265-b6d3-f1b4ebbaa857",
      "name": "Google Gemini Chat Model1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "60084df9-b775-40cf-9f66-e49a3a38ce1c",
              "name": "tranDocu",
              "value": "={{ $('Code7').item.json.documentContent }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1000,
        -20
      ],
      "id": "e875a920-b982-4623-86e3-7b802ccfd688",
      "name": "SET(BOTH"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=你是一名内容分析专家，请根据以下原始内容 tranDocu 提取关键信息：\n\n任务：\n\n提取 5-15 个关键词（关键词应有代表性，例如涉及的技术、话题、人名、组织等）\n提取 5-10 个核心观点（每条为一句话，总结该内容的重要看法或结论）\n提取内容分类（如技术主题、商业案例、社会观察等，可多个，用逗号分隔）\n文档核心主题（1段话，50-100 字，概括主要内容）\n参考链接（提取文档中提到的 5-10 个重点链接，仅列出 URL，不加文字说明；若无链接，输出空数组）\n输入内容：\n{{ $json.tranDocu }}\n\n要求：\n\n输出严格遵循 JSON 格式，确保字段名和结构与示例一致。\n关键词 5-15 个，核心观点 5-10 个，分类用逗号分隔，主题 50-100 字。针对文档内容输出一次即可\n链接仅提取明确 URL，若无则返回空数组 []。\n不要包含额外文字、Markdown 或注释。",
        "hasOutputParser": true,
        "options": {
          "systemMessage": ""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        1220,
        -20
      ],
      "id": "feaef23c-d8f0-418b-9bf8-a104aa7b542a",
      "name": "文档关键词提取 Agent(BOTH)"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1620,
        620
      ],
      "id": "6e601d76-9954-4a47-8693-3d28a45a4fdc",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title\": \"string (基于视频内容的博客标题)\",\n  \"introduction_concept\": \"string (引言的核心思想或草稿)\",\n  \"sections\": [\n    {\n      \"heading\": \"string (章节1标题 - 源自视频)\",\n      \"type\": \"string (例如: 'paragraph', 'list', 'code', 'image_description')\",\n      \"points\": [\n        \"string (要点1 - 源自视频, 可用文档补充)\",\n        \"string (要点2 - 源自视频, 可用文档补充)\"\n      ],\n      \"language\": \"string (可选, 代码语言)\"\n    },\n    {\n      \"heading\": \"string (章节2标题 - 源自视频)\",\n      \"type\": \"string\",\n      \"points\": [\n        \"string (要点1)\",\n        \"string (要点2)\"\n      ]\n    }\n  ],\n  \"conclusion_concept\": \"string (结论的核心思想或草稿)\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        2420,
        860
      ],
      "id": "49f63ae2-b6d1-4654-9f3d-07822dd890f4",
      "name": "Structured Output Parser10"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2100,
        860
      ],
      "id": "4945a159-a89f-446f-96c9-ffde8620f0fa",
      "name": "OpenAI Chat Model13"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# 角色: 资深科技博客编辑\n\n# 任务:\n根据**视频转写内容**（主要来源）和**文档内容**（辅助资料），为一篇博客设计详细、逻辑清晰的大纲，以视频内容为主导。输出语言为：`{{ $json['output_language '] }}`.\n\n# 核心要求:\n1. **视频内容优先**:\n   - 大纲结构、章节划分、核心论点和流程严格遵循 `full_video_transcription` 的内容和逻辑顺序。\n2. **文档内容辅助**:\n   - 文档（`document_content`, `document_keywords`, `document_core_views`, `document_main_theme`, `document_reference_urls`）仅在视频主题范围内补充技术细节、案例或数据，需标注来源（如“基于文档”）。\n   - 严禁因文档内容单独设章节或更改视频主线。\n   - - 若引用文档，`points` 中注明具体来源 URL（如 `document_reference_urls` 或推测的“DeepWiki官网：https://deepwiki.com”），或标注“内部文档”，支持内容生成时的 Markdown 引用列表。\n3. **输出结构**:\n   - JSON 对象，包含：\n     - `title`: 简洁、吸引人的博客标题，基于 `video_title`.\n     - `introduction_concept`: 1-2句，概述视频主旨，引导引言。\n     - `sections`: 章节数组，每个包含：\n       - `heading`: 清晰小标题。\n       - `type`: 'paragraph', 'list', 'code', 'image_description'，基于内容形式（`list` 适合步骤/功能，1-2章节优先；`paragraph` 适合叙述；`code` 需示例；`image_description` 适合图表）。\n       - - `points` 提供 4-6 个详细要点，引用视频转写具体细节（如时间戳、数据、示例），文档补充技术术语、案例或场景线索，支持每章节 400-600 字扩展。\n       - `language`: 若 `type` 为 'code'，指定语言（如 'python'）。\n     - `conclusion_concept`: 1-2句，总结视频价值或展望。\n4. **逻辑与流畅性**:\n   - 章节顺序紧随视频展开，`points` 包含衔接线索（如“延续上一节”），在“市场反响”或“技术实现”章节的 `points` 中包含 1-2 个挑战（如私有仓库支持有限、免费模式可持续性），基于文档，标注来源。\n   - 参考 `video_title` 和 `video_description` 把握主题。\n5. **严格 JSON 输出**:\n   - 仅输出 JSON 对象，以 `{` 开始，`}` 结束，禁止文字、解释或 Markdown.\n6.- 选择 `type` 时，`list` 优先用于步骤/功能（如使用方法，至少 1-2 章节），`paragraph` 用于叙述/分析，`code` 需示例，`image_description` 适合图表。\n\n# 输入信息:\n- **视频转写**: ```json {{ JSON.stringify($json.video_transcription) }} ```\n- **视频标题**: `{{ $json.video_title }}`\n- **视频描述**: `{{ $json.video_description }}`\n- **文档内容**: ``` {{ $json.document_content }} ```\n- **文档关键词**: `{{ JSON.stringify($json.document_keywords) }}`\n- **文档核心观点**: `{{ JSON.stringify($json.document_core_views) }}`\n- **文档核心主题**: `{{ $json.document_main_theme }}`\n- **文档参考链接**: `{{ JSON.stringify($json.document_reference_urls) }}`\n\n# 输出语言: `{{ $json['output_language '] }}`\n\n仅输出 JSON 大纲：",
        "hasOutputParser": true,
        "options": {
          "systemMessage": ""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        2200,
        620
      ],
      "id": "e8f3b2f7-94a4-4ef8-922c-c31d0e6b8b5c",
      "name": "博客大纲Agent(BOTH)1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1a36c852-27ac-4c51-b186-171ab1c42e82",
              "name": "video_transcription",
              "value": "={{ $input.item.json.transcription }}",
              "type": "string"
            },
            {
              "id": "683674ac-0bc1-43cc-b51c-a7de4cf5c3b1",
              "name": "document_analysis",
              "value": "={{ $input.item.json.output }}",
              "type": "string"
            },
            {
              "id": "a578e169-3ed4-44f8-ae31-fff80e15c133",
              "name": "video_title",
              "value": "={{ $('设置元数据和URL(BOTH)').item.json.originalVideoTitle }}",
              "type": "string"
            },
            {
              "id": "184eafe3-9b3c-4b53-9905-ba04d52ea72f",
              "name": "document_content",
              "value": "={{ $('SET(BOTH').item.json.tranDocu }}",
              "type": "string"
            },
            {
              "id": "fbc905fd-6ffc-45f4-a43c-a821223e81fb",
              "name": "video_description",
              "value": "={{ $('设置元数据和URL(BOTH)').item.json.originalVideoDescription }}",
              "type": "string"
            },
            {
              "id": "c24789dc-2927-426c-85af-c4bf3caf8488",
              "name": "output_language ",
              "value": "={{ $('AI Agent2').item.json.output.outputLanguage }}",
              "type": "string"
            },
            {
              "id": "03e2f5f5-4de8-4a8e-8138-7cf74ac1cb10",
              "name": "document_keywords",
              "value": "={{ $input.item.json.output.keywords }}",
              "type": "string"
            },
            {
              "id": "6b218637-cd5f-4a1e-ba3e-893587af0918",
              "name": "document_core_views",
              "value": "={{ $input.item.json.output.coreView }}",
              "type": "string"
            },
            {
              "id": "9af7a03b-f2a4-436a-93f4-408a9f06893b",
              "name": "document_main_theme",
              "value": "={{ $input.item.json.output.mainTheme }}  ",
              "type": "string"
            },
            {
              "id": "b36fe8e3-0b55-4972-8d8f-18f3c16a1770",
              "name": "document_reference_urls",
              "value": "={{ $input.item.json.output.url }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1880,
        620
      ],
      "id": "1d100c8e-c074-404a-a1f8-baf9feaf50d6",
      "name": "SET全部信息"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        3020,
        840
      ],
      "id": "c5f1587b-eda6-4a5a-8281-dde904efe359",
      "name": "OpenAI Chat Model14"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# 角色: 专业的技术内容写手\n\n# 任务:\n为博客撰写**完整正文内容**，目标总字数2000-2500字（约4000-5000字符）。基于所有章节信息（`all_sections`），为每个章节生成独立正文，以**视频转写内容**为主，参考**文档内容**补充细节，并在引用文档内容时于章节末尾列出相关 URL。输出语言为：`{{ $('SET全部信息').item.json['output_language '] }}`。\n\n# 核心要求:\n1. **处理所有章节**:\n   - 按 `{{ JSON.stringify($json.all_sections) }}` 顺序遍历章节，使用 `heading`、 `points`、 `type` 生成内容，深入阐述每个要点。\n   - 灵活分配字数（总计2000-2500字）：重要章节（如“核心功能”）500-600字，非重要章节（如“市场反响”）350-400字。\n   - 扩展内容：\n     - 引用 `full_video_transcription` 细节（例如，40亿行代码、30万美元成本）。\n     - 提取 `full_document_content` 技术术语、案例、数据（如DeepResearch技术）。\n     - 构建开发者场景（例如，“前端开发者Lucy快速解析React项目”），基于文档，若无不加。\n     - 提供专家解读（例如，DeepWiki与Sphinx对比），基于文档，若无不加。\n     - 融入行业趋势（例如，AI生成文档前景），基于文档，若无不加.\n2. **视频内容主导**:\n   - 以 `full_video_transcription` 为主要来源，提取与 `points` 相关的细节。若转写有限，基于 `points` 和 `heading` 合理扩展，保持主题一致.\n3. **文档内容辅助**:\n   - 从 `full_document_content` 补充技术原理、案例、数据，严格围绕DeepWiki功能和视频主线，禁止无关AI原理。\n   - 每次引用 `full_document_content` 的内容（如DeepResearch技术、Cognition AI背景），在章节末尾以 Markdown 格式列出相关 URL（例如，`- [文档标题]: <URL>`），文档可能没明显标注引用哪个链接，你需要根据链接url内容推测，不必百分百准确，但还是要细心推测。\n   - 若文档无明确 URL，标注为“内部文档”或其他来源（如“DeepWiki官网：https://deepwiki.com”），基于上下文合理推测.如果引用内容多可以不止一个链接，但一定要正文关联性高的引用内容！\n4. **全局上下文参考**:\n   - 参考其他章节的 `points`，确保内容与博客主题一致，避免重复。\n   - 增强衔接：段首回顾（例如，“正如上一节提到的文档生成功能...”），段末承接（例如，“这些优势为下一节的用户体验奠定基础”）.\n5. **章节类型格式**:\n   - 按 `type`（'paragraph', 'list', 'code', 'image_description'）生成：\n     - 'paragraph': 连续段落。\n     - 'list': Markdown 无序列表（- ），每项2-3句。\n     - 'code': Markdown 代码块（```），用 `language`（默认'N/A'），附注释。\n     - 'image_description': 描述视觉元素（如流程图）及其意义。\n   - 缺 `type` 默认 'paragraph'。\n   - 1-2章节（如“使用方法”）使用逐条分析（`・xxx：xxx`），其他用段落，逐条占比≤30%.\n6. **包含标题**:\n   - 输出开头包含总标题 `# {{ $json.overall_blog_title }}` 和摘要（基于 `{{ $json.section_data.output.introduction_concept }}` 扩写，100-150字）。\n   - 每个章节以 `##  section.heading ` 开头。\n7. **语言风格**:\n   - 专业、流畅、引人入胜。\n   - 技巧：\n     - 开发者场景：1-2个场景（如“Lucy解析项目”），基于文档，若无不加。\n     - 专家解读：1-2段分析（如对比工具），基于文档，若无不加。\n     - 行业趋势：预测AI文档前景，基于文档，若无不加。\n     - 平衡性：在“市场反响”或“技术实现”讨论1-2个挑战（如私有仓库支持），基于文档，若无不加.\n8. **章节独立性与连贯性**:\n   - 章节独立完整，参考 `points` 和 `{{ $json.overall_blog_title }}` 确保整体连贯.\n9. **严格内容输出**:\n   - 仅包含总标题、摘要、章节标题、正文及引用 URL，按 `all_sections` 顺序。\n   - 禁止解释、前缀、注释或 ```json。\n   - 章节间空行分隔，引用 URL 置于章节末尾（Markdown 列表格式）。\n   - 总字数2000-2500字，估算后若不足，优先加深分析、场景、趋势，避免重复.\n10.最后根据{{ $('博客大纲Agent(BOTH)1').item.json.output.conclusion_concept }}写一段200-300字的总结，概括全文\n\n# 输入信息:\n* 所有章节信息: `{{ JSON.stringify($json.all_sections) }}`\n* 视频转写: ```json {{ JSON.stringify($json.full_video_transcription) }} ```\n* 文档内容: ``` {{ $json.full_document_content }} ```\n* 博客总标题: `{{ $json.overall_blog_title }}`\n* 博客摘要: `{{ $json.section_data.output.introduction_concept }}`\n\n# 输出语言: `{{ $('SET全部信息').item.json['output_language '] }}`\n\n仅输出 Markdown 格式文本（总标题、摘要、章节标题、正文及引用 URL）：",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=每个小节的 {{ $json.heading }}别忘记加上。"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        3040,
        620
      ],
      "id": "c9fdbc6c-406a-4974-b436-9cc33c02a4a0",
      "name": "填充章节内容Agent2"
    },
    {
      "parameters": {
        "jsCode": "// --- 获取当前循环正在处理的章节数据 ---\nconst currentSection = $input.item.json;\n\n// --- 从循环外部的节点获取共享的上下文信息 ---\nconst contextSetNode = $('SET全部信息').first();\nif (!contextSetNode || !contextSetNode.json) {\n  throw new Error(\"错误：无法从 Set 节点 'SET全部信息' 获取有效的 JSON 数据。请检查节点名称和执行结果。\");\n}\nconst videoTranscription = contextSetNode.json.video_transcription;\nconst documentContent = contextSetNode.json.document_content;\nconst outputLanguage = contextSetNode.json.output_language;\n\nconst outlineAgentNode = $('博客大纲Agent(BOTH)1').first();\nif (!outlineAgentNode || !outlineAgentNode.json || !outlineAgentNode.json.output) {\n  throw new Error(\"错误：无法从大纲 Agent 节点 '博客大纲Agent(BOTH)1' 获取有效的 output JSON 数据。请检查节点名称和执行结果。\");\n}\nconst blogTitle = outlineAgentNode.json.output.title;\nconst allSections = outlineAgentNode.json.output.sections;\n\n// --- 动态匹配当前章节的 points ---\nlet currentSectionPoints = currentSection.points || [];\nif (!currentSectionPoints.length && Array.isArray(allSections)) {\n  const matchedSection = allSections.find(section => section.heading === currentSection.heading);\n  if (matchedSection && matchedSection.points) {\n    currentSectionPoints = matchedSection.points;\n  }\n}\n\n// --- 将当前章节数据和共享上下文数据合并到一个新对象中 ---\nconst combinedData = {\n  section_data: currentSection,\n  current_section_points: currentSectionPoints, // 新增：当前章节的 points\n  full_video_transcription: videoTranscription,\n  full_document_content: documentContent,\n  overall_blog_title: blogTitle,\n  target_output_language: outputLanguage,\n  all_sections: allSections\n};\n\n// --- 返回这个合并后的对象 ---\nreturn combinedData;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2660,
        620
      ],
      "id": "8a1cba36-2814-4722-9dfc-75433a808b84",
      "name": "Code5"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        3440,
        860
      ],
      "id": "b1a84e63-9545-4411-889d-ab544f6361ac",
      "name": "整理+图片建议4"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# 角色: 专业技术博客排版助手\n\n# 任务:\n整理输入的博客正文为可读的 Markdown 格式，保留其结构（总标题、摘要、章节标题、正文、引用），并为每个章节生成 1-2 个图片或表格建议，增强技术博客的可视化效果。输出语言为：`{{ $('SET全部信息').item.json['output_language '] }}`.\n\n# 核心要求:\n1. **正文整理**:\n   - 保留输入正文（`input_content`）的完整结构和内容，包括：\n     - 总标题（`# 标题`）。\n     - 摘要（无标题的首段）。\n     - 章节标题（`## 标题`）、正文、引用（`**引用**: ...`）。\n     - 总结段落（`## 总结`）。\n   - 确保 Markdown 格式规范，章节间以单个空行分隔，引用列表格式为 `- [标题]: <URL>`。\n2. **可视化建议**:\n   - 为每个章节生成 1-2 个图片或表格建议，基于 `all_sections`, `video_transcription`, `document_content` 和正文内容。\n   - 图片建议：\n     - 描述具体视觉元素（例如，“DeepWiki 界面截图，展示目录布局”），与章节内容相关（如架构图、界面、流程图）。\n     - 优先基于 `image_description` 类型线索或视频/文档中的可视化内容（如交互式图表，）。[](https://apidog.com/blog/deepwiki/)\n     - 考虑技术博客读者，保持专业性（例如，代码结构图而非装饰性图片，）。[](https://visme.co/blog/best-data-visualizations/)\n   - 表格建议：\n     - 列出数据或对比内容（例如，“DeepWiki 与 Sphinx 的功能对比”），基于章节的数字或功能点（如 3 万仓库、40 亿行代码，）。[](https://ghost.codersera.com/blog/how-to-use-deepwiki/)\n     - 确保表格简洁，3-5 行，2-4 列，突出关键信息（）。[](https://www.tableau.com/learn/articles/best-data-visualization-blogs)\n   - 每建议包含：\n     - 类型（“图片”或“表格”）。\n     - 描述（50-80 字，说明内容和目的，例如，“展示 DeepWiki 生成的架构图，说明项目结构”）。\n     - 关联性（与章节 `points` 或正文内容挂钩）。\n3. **可视化风格**:\n   - 图片：专业、技术导向（如架构图、界面截图），避免通用库存照片，适合技术博客（,）。[](https://www.siegemedia.com/creation/blog-post-images)[](https://www.hypotenuse.ai/blog/how-to-choose-the-best-images-for-blogs)\n   - 表格：清晰、数据驱动（如功能对比、规模统计），使用 Markdown 表格格式，易于嵌入（,）。[](https://nvision.co/digital-marketing/best-practices-blog-imagery/)[](https://www.orbitmedia.com/blog/blog-image-best-practices/)\n   - 建议考虑读者需求（开发者、技术爱好者），增强理解复杂概念（如代码关系，）。[](https://visme.co/blog/best-data-visualizations/)\n4. **输出格式**:\n   - Markdown，包含：\n     - 原正文（总标题、摘要、章节标题、正文、引用）。\n     - 每章节正文后添加 `**可视化建议**` 列表（`- 图片：xxx` 或 `- 表格：xxx`）。\n     - 总结段落后可添加整体可视化建议（如全篇关键图表）。\n   - 禁止解释、前缀、注释或 ```json。\n   - 章节间空行分隔，可视化建议与正文空行分隔。\n5. **输入利用**:\n   - 基于 `all_sections` 的 `points` 和 `type`（如 `image_description` 线索）。\n   - 参考 `video_transcription` 的可视化内容（例如，DeepSeq R1 图表，15.6-35.4s）。\n   - 使用 `document_content` 的技术细节（DeepResearch、Cognition AI 背景）。\n   - 优先视频和文档支持的内容，禁止臆造。\n6. **语言风格**:\n   - 建议描述专业、简洁，适合技术博客读者，突出可视化对内容的增强作用。\n\n# 输入信息:\n* 正文内容: ``` {{ $json.output }} ```\n* 所有章节信息: ```{{JSON.stringify( $('Code5').item.json.all_sections) }} ```\n* 视频转写: ``` {{ $('SET全部信息').item.json.video_transcription }}```\n* 文档内容: ``` {{ $('SET全部信息').item.json.document_content }} ```\n* 博客总标题: ``` {{ $('博客大纲Agent(BOTH)1').item.json.output.title }} ```\n* 博客摘要: ``` {{ $('博客大纲Agent(BOTH)1').item.json.output.introduction_concept }}```\n\n# 输出语言: ``` {{ $('SET全部信息').item.json['output_language '] }} ```",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        3480,
        620
      ],
      "id": "4dd72aef-e967-4826-a999-c06eb923bad5",
      "name": "整理+图片建议5"
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "1D6dn5EtLXZCu70FtsFjAPe3LyQ_b76LwygVvgMWn9fQ",
        "actionsUi": {
          "actionFields": [
            {
              "action": "insert",
              "text": "={{ $json.output }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        3920,
        620
      ],
      "id": "5ab90051-2c38-4598-ae25-dd9c6c392f29",
      "name": "Google Docs2"
    }
  ],
  "pinData": {},
  "connections": {
    "处理链接：提交URL给处理服务(BOTH)": {
      "main": [
        [
          {
            "node": "设置元数据和URL(BOTH)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "设置元数据和URL(BOTH)": {
      "main": [
        [
          {
            "node": "下载转换好的 WAV 文件(BOTH)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "下载转换好的 WAV 文件(BOTH)": {
      "main": [
        [
          {
            "node": "Whisper API转写（BOTH）",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Whisper API转写（BOTH）": {
      "main": [
        [
          {
            "node": "提取转写文本(BOTH)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "提取转写文本(BOTH)": {
      "main": [
        [
          {
            "node": "SET(BOTH",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Structured Output Parser6": {
      "ai_outputParser": [
        [
          {
            "node": "文档关键词提取 Agent(BOTH)",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "文档关键词提取 Agent(BOTH)",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "SET(BOTH": {
      "main": [
        [
          {
            "node": "文档关键词提取 Agent(BOTH)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "文档关键词提取 Agent(BOTH)": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "SET全部信息",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser10": {
      "ai_outputParser": [
        [
          {
            "node": "博客大纲Agent(BOTH)1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model13": {
      "ai_languageModel": [
        [
          {
            "node": "博客大纲Agent(BOTH)1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "博客大纲Agent(BOTH)1": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SET全部信息": {
      "main": [
        [
          {
            "node": "博客大纲Agent(BOTH)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model14": {
      "ai_languageModel": [
        [
          {
            "node": "填充章节内容Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "填充章节内容Agent2": {
      "main": [
        [
          {
            "node": "整理+图片建议5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "填充章节内容Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "整理+图片建议4": {
      "ai_languageModel": [
        [
          {
            "node": "整理+图片建议5",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "整理+图片建议5": {
      "main": [
        [
          {
            "node": "Google Docs2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2af776b2-2e2a-48cf-8d12-7a5c98c7ac1a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b46047c141e2c73117defd36339fb0644db40746ab8898ebef0569b8501555a2"
  },
  "id": "YhXzwK5MC15ElWlN",
  "tags": []
}