## 2025-04-27 工作总结：AIplatJava 项目初始化与环境配置

**目标：** 搭建 Spring Boot 后端项目 `AIplatJava` 的基础框架，并配置好数据库开发环境。

**一、 Spring Boot 项目框架搭建 (`AIplatJava`)**

1.  **项目初始化：**
    *   遵循指导，创建了一个基于 Spring Boot (v3.4.5) 的 Maven 项目。
    *   项目 Group ID: `com.ding`
    *   项目 Artifact ID: `AIplatJava`
    *   使用 Java 版本: 21
    *   打包方式: Jar
2.  **核心依赖配置 (`pom.xml`):**
    *   添加了项目运行所需的核心依赖，包括：
        *   `spring-boot-starter-web`: 用于构建 Web 应用和 RESTful API。
        *   `spring-boot-starter-security`: 用于处理认证和授权。
        *   `mybatis-plus-boot-starter` (v3.5.7): MyBatis-Plus 框架，简化数据库操作。
        *   `mysql-connector-j`: MySQL 数据库连接驱动。
        *   `spring-ai-starter-model-openai`: Spring AI 对 OpenAI 模型的集成。
        *   `lombok`: 简化 Java 代码（如自动生成 getter/setter）。
        *   `spring-boot-devtools`: 开发工具，提供热部署等功能。
    *   引入了 `spring-ai-bom` 来统一管理 Spring AI 相关依赖的版本。
3.  **基础配置 (`application.properties`):**
    *   配置了 Spring Boot 应用名称 (`spring.application.name=AIplatJava`)。
    *   后续添加了数据库连接信息和 OpenAI API 密钥。

**二、 数据库环境配置 (使用 Docker Compose)**

1.  **Docker Compose 文件 (`docker-compose.yml`):**
    *   创建了 `docker-compose.yml` 文件来定义和管理 MySQL 服务。
    *   使用 `mysql:8.0` 镜像。
    *   配置了容器名称 (`mysql_aisp_db`)。
    *   设置了环境变量：
        *   `MYSQL_ROOT_PASSWORD` (用户已设置)
        *   `MYSQL_DATABASE=ai_support_platform_db` (自动创建数据库)
        *   `MYSQL_USER=aisp_user` (自动创建用户)
        *   `MYSQL_PASSWORD` (用户已设置)
    *   设置数据库服务器默认字符集为 `utf8mb4`，排序规则为 `utf8mb4_unicode_ci`。
    *   使用具名卷 `mysql_aisp_data` 进行数据持久化。
2.  **端口映射与启动：**
    *   初次尝试映射主机端口 `3307` 失败 (端口占用)。
    *   最终将容器的 `3306` 端口成功映射到主机的 `3306` 端口 (`ports: - "3306:3306"`)。
    *   通过 `docker-compose up -d` 成功启动 MySQL 容器。
3.  **数据库客户端连接问题排查：**
    *   遇到 Gripdata 连接报 `Access denied` 的问题。
    *   排查确认了连接参数、用户权限 (`aisp_user@'%'`) 均正确。
    *   将 `aisp_user` 的认证插件从默认的 `caching_sha2_password` 修改为兼容性更好的 `mysql_native_password`。

**三、 配置整合与应用启动**

1.  **更新 `application.properties`:**
    *   根据 Docker Compose 的配置，更新了 `spring.datasource.url`, `spring.datasource.username`。
    *   用户手动添加了 `spring.datasource.password`。
    *   添加了 `spring.ai.openai.api-key`。
2.  **解决启动问题：**
    *   通过配置 `application.properties` 中的数据库连接信息，解决了初始的 `DataSource` 配置错误。
    *   通过配置 OpenAI API 密钥，解决了后续的 `openAiAudioSpeechModel` Bean 创建错误。
3.  **最终状态：**
    *   Spring Boot 应用 `AIplatJava` 能够成功启动，并连接到 Docker 中的 MySQL 数据库。
    *   数据库客户端 Gripdata 最终通过端口 `33306` 成功连接到数据库 (注意：此端口与 Docker Compose 中配置的 `3306` 映射不符，但用户确认此端口连接成功)。

**四、 项目主要依赖列表 (根据 `pom.xml`)**

*   `org.springframework.boot:spring-boot-starter-security`
*   `org.springframework.boot:spring-boot-starter-web`
*   `com.baomidou:mybatis-plus-boot-starter:3.5.7`
*   `org.springframework.ai:spring-ai-starter-model-openai` (版本由 `spring-ai-bom` 管理)
*   `org.springframework.boot:spring-boot-devtools`
*   `com.mysql:mysql-connector-j`
*   `org.projectlombok:lombok`
*   `org.springframework.boot:spring-boot-starter-test` (Test Scope)
*   `com.baomidou:mybatis-plus-boot-starter-test:3.5.7` (Test Scope)
*   `org.springframework.security:spring-security-test` (Test Scope)
*   `org.springframework.ai:spring-ai-bom` (Import Scope in `<dependencyManagement>`)
